
//二分查找
/*
数据必须有序 比顺序查找快*/
void research(int arr[],int n)
{
	int low = 0;

	int target = 68;
	int high = n - 1;
	int index = -1;
	
	while (low <= high)
	{
		int mid = (high + low) / 2;
		if (arr[mid] == target)
		{
			index = mid;
			break;
		}
		else if (arr[mid] < target)
		{
			low = mid + 1;
		}
		else
		{
			high = mid - 1;
		}

	}
	if (index == -1)
	{
		printf("未找到\n");
	}
	else
	{
		printf("found! target index: %d\n", index);
	}

}
int main()
{
	int arr[] = { 0,5,13,19,22,41,55,68,72,81,98 };//arr[]数组的大小只能在main中计算 否则在函数中传递的只是数组的指针 函数内部无法获取数组的大小
	int n = sizeof(arr) / sizeof(arr[0]);
	research(arr,n);

	return 0;
}






//冒泡排序

void printArray(int arr[], int length) {
	for (int i = 0; i < length; i++) {
		printf("%d ", arr[i]);
	}
	printf("\n");
}
int main()
{
	void printArray(int array[], int length);
	//int arr[] = { 49,38,65,97,76,13,27,49 };
	int arr[] = { 12,13,25,97,16,27,28,49 };
	int i, j, tmp;
	int flag = 0;
	int length = sizeof(arr) / sizeof(arr[0]);
	printf("待排序的数组是:");

	printArray(arr, length);
	for (i = 0; i < length - 1; i++)
	{
		int flag = 0;
		for (j = 0; j < length - i - 1; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				flag = 1;
				tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
	
		}
		printf("第%d轮的排序结果: ", i + 1);
		printArray(arr, length);

		if (!flag)
			break;
	}
	return 0;
}




//冒泡排序函数版


void printarray(int arr[], int length)
{
	for (int i = 0; i < length; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
}
void bobsort(int arr[], int length)
{
	for (int i = 0; i < length - 1; i++)
	{
		int tmp = 0;
		int flag = 0;
		for (int j = 0; j < length - i - 1; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				
				tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
				flag = 1;// 误用int flag = 1;重新声明了局部变量，导致每进入一次内层循环都会创建一个新的局部变量，而非改变外层已存在的flag变量值 外层循环无法获取到任何关于这次循环是否有发生交换的信息。

因此，在下一轮外层循环开始时，由于外层循环的flag未被正确更新，它始终保持着初始值0，导致整个冒泡排序算法只能进行一次完整的遍历
			}
	
		}
		printf("第%d轮的排序结果: ", i + 1);
		printarray(arr, length);
		
		if (!flag)
		{
			break;
		}
		
	}
}
int main()
{
	int arr[] = { 49,38,65,97,76,13,27,49 };

	int length = sizeof(arr) / sizeof(arr[0]);
	printf("待排序的数组是: ");

	printarray(arr, length);

	bobsort(arr, length);
	printarray(arr, length);
	return 0;
}






















